<?php
/**
 * Copyright Â© PureClarity. All rights reserved.
 * See LICENSE.txt for license details.
 */

/** @var $block \Pureclarity\Core\Block\Adminhtml\Dashboard\RunFeedsModal */

/** @var \Pureclarity\Core\ViewModel\Adminhtml\Stores $stores */
$stores = $block->getPureclarityStoresViewModel();

?>
<style>
    #pc-feed-outputContainer {
        margin:20px 0;
    }

    .pc-run-feeds .modal-inner-wrap {
        width:450px;
    }

    #pc-feeds-modal-content h4 {
        clear:both;
        padding-top:10px;
    }

    #pc-feeds-modal-content label {
        display: block;
        float:left;
        width: 100px;
        padding: 0;
        text-align: right;
        margin-right: 20px;
    }

    #pc-feeds-modal-content label.forselect {
        padding:5px;
    }

    #pc-feeds-modal-content select {
        display: block;
        float:left;
    }

    #pc-feeds-modal-content .pc-feed-field {
        clear:both;
        margin: 10px 0;
        display:block;
        height: 20px;
    }
</style>

<div id="pc-feeds-modal-popup" style="display:none;" class="admin__scope-old">
    <div id="pc-feeds-modal-content" class="admin__scope-old">
        <h4><?= $block->escapeHtml('Select the store that would like to generate feeds for:') ?></h4>
        <div class="pc-feed-field">
            <label for="pc-selectStore" class="forselect"><?= $block->escapeHtml('Store') ?></label>
            <select id="pc-selectStore" class="select admin__controle-select">
                <?php foreach ($stores->getStoreList() as $storeId => $name) : ?>
                    <option value="<?= $storeId; ?>" ><?= $name; ?></option>
                <?php endforeach; ?>
            </select>
        </div>
        <h4><?= $block->escapeHtml('Please select the data you would like to send to PureClarity:' ) ?></h4>
        <div class="pc-feed-field">
            <label for="pc-chkProducts"><?= $block->escapeHtml('Products') ?></label>
            <input id="pc-chkProducts" type="checkbox" checked="checked" />
        </div>
        <div class="pc-feed-field">
            <label for="pc-chkCategories"><?= $block->escapeHtml('Categories') ?></label>
            <input id="pc-chkCategories" type="checkbox" checked="checked" />
        </div>
        <div class="pc-feed-field">
            <!-- TODO: HIDE THIS IF BRAND FEED DISABLED -->
            <label for="pc-chkBrands"><?= $block->escapeHtml('Brands') ?></label>
            <input id="pc-chkBrands" type="checkbox" checked="checked" />
        </div>
        <div class="pc-feed-field">
            <label for="pc-chkUsers"><?= $block->escapeHtml('Users') ?></label>
            <input id="pc-chkUsers" type="checkbox" checked="checked" />
        </div>

        <h4><?= $block->escapeHtml('Importing your orders helps to initialize PureClarity with the purchasing behavior of your visitors.') ?></h4>
        <div class="pc-feed-field">
            <label for="pc-chkOrders"><?= $block->escapeHtml('Order History') ?></label>
            <input id="pc-chkOrders" type="checkbox" />
        </div>

        <div id="pc-feed-outputContainer">
            <div id="pc-statusMessage" style="display:none"></div>
        </div>
    </div>
</div>
<script>
    var pureclarityObj = pureclarityObj || {};
    require(['jquery','Magento_Ui/js/modal/modal'],
        function($, modal){
            window.pureclarityObj = {
                runFeedUrl: '<?= $block->getUrl('pureclarity/datafeed/runfeed'); ?>',
                progressFeedUrl: '<?= $block->getUrl('pureclarity/datafeed/progress'); ?>',
                deltasUrl: '<?= $block->getUrl('pureclarity/datafeed/deltas'); ?>',
                isComplete: true,
                selectStore: $('#pc-selectStore'),
                runButton: $('#pc-runFeedButton'),
                messageContainer: $('#pc-statusMessage'),
                chkProducts: $('#pc-chkProducts'),
                chkCategories: $('#pc-chkCategories'),
                chkBrands: $('#pc-chkBrands'),
                chkUsers: $('#pc-chkUsers'),
                chkOrders: $('#pc-chkOrders'),
                selectedStore: 0,
                callError: null
            };

            // Function to execute running of feed
            function pcFeedRun() {
                alert(pureclarityObj.isComplete);
                if (pureclarityObj.isComplete) {
                    if (!pureclarityObj.chkProducts.is(':checked') && !pureclarityObj.chkCategories.is(':checked') && !pureclarityObj.chkBrands.is(':checked') && !pureclarityObj.chkUsers.is(':checked') && !pureclarityObj.chkOrders.is(':checked')){
                        pcFeedMessage($.mage.__('Error: You must select at least one feed type to create.'));
                        return;
                    }

                    pcFeedMessage($.mage.__('Waiting for feed run to start (may take up to a minute)...'));

                    pureclarityObj.selectedStore = pureclarityObj.selectStore.find(":selected").val();
                    pureclarityObj.selectStore.prop("disabled", true);
                    pureclarityObj.runButton.prop("disabled", true);
                    pureclarityObj.chkProducts.prop("disabled", true);
                    pureclarityObj.chkCategories.prop("disabled", true);
                    pureclarityObj.chkBrands.prop("disabled", true);
                    pureclarityObj.chkUsers.prop("disabled", true);
                    pureclarityObj.chkOrders.prop("disabled", true);
                    pureclarityObj.isComplete = false;

                    var urlParts = [pureclarityObj.runFeedUrl + '?storeid=' + pureclarityObj.selectedStore];
                    urlParts.push('product=' + pureclarityObj.chkProducts.is(':checked'));
                    urlParts.push('category=' + pureclarityObj.chkCategories.is(':checked'));
                    urlParts.push('brand=' + pureclarityObj.chkBrands.is(':checked'));
                    urlParts.push('user=' + pureclarityObj.chkUsers.is(':checked'));
                    urlParts.push('orders=' + pureclarityObj.chkOrders.is(':checked'));

                    $.ajax({
                        url: urlParts.join('&'),
                        data: { form_key: window.FORM_KEY, storeid: pureclarityObj.selectedStore },
                    })
                    .done(function(response) {})
                    .fail(function(jqXHR, status, err) {
                        pureclarityObj.callError = jqXHR.responseText;
                    });

                    setTimeout(pcFeedProgressCheck, 1000);
                }
            }

            function pcFeedProgressCheck() {
                if (pureclarityObj.callError) {
                    pureclarityObj.message(pureclarityObj.callError);
                    pureclarityObj.isComplete = true;
                    pcFeedResetState();
                } else {
                    $.ajax({
                        url: pureclarityObj.progressFeedUrl,
                        data: {form_key: window.FORM_KEY, storeid: pureclarityObj.selectedStore},
                    }).done(pcFeedManageProgressResponse);
                }
            }

            function pcFeedMessage(message){
                pureclarityObj.messageContainer.show();
                pureclarityObj.messageContainer.html('<strong>' + $.mage.__('Status:') + '</strong> ' + message);
            }

            function pcFeedManageProgressResponse(response){
                if (response && response.error){
                    if (response.error === "true") {
                        // session has ended, reload to force login
                        location.reload();
                    } else {
                        pcFeedMessage($.mage.__('ERROR: Sorry but an error occurred: ') + response.error);
                        pureclarityObj.isComplete = true;
                        pcFeedResetState();
                    }
                } else if (response && response.isUploaded) {
                    pcFeedMessage($.mage.__('SUCCESS: Data feed(s) successfully submitted to PureClarity.'));
                    pcFeedResetState();
                } else {
                    if (response && response.isComplete === false){
                        var percent = ((response.cur/response.max) * 100).toFixed(0);
                        var message = "Building " + response.name + " feed... (" + percent + "%)";
                        pcFeedMessage(message);
                    } else if (response) {
                        pcFeedMessage($.mage.__('Uploading to PureClarity...'));
                    }

                    setTimeout(pcFeedProgressCheck, 1000);
                }
            }

            function pcFeedResetState() {
                pureclarityObj.isComplete = true;
                pureclarityObj.selectStore.prop("disabled", false);
                pureclarityObj.runButton.prop("disabled", false);
                pureclarityObj.chkProducts.prop("disabled", false);
                pureclarityObj.chkCategories.prop("disabled", false);
                pureclarityObj.chkBrands.prop("disabled", false);
                pureclarityObj.chkUsers.prop("disabled", false);
                pureclarityObj.chkOrders.prop("disabled", false);
            }

            // Initialise pc
            let options = {
                type: 'popup',
                responsive: true,
                innerScroll: true,
                modalClass: 'pc-run-feeds',
                title: $.mage.__('PureClarity Data Feed'),
                buttons: [{
                    text: $.mage.__('Run feeds now'),
                    class: '',
                    click: pcFeedRun
                }]
            };

            modal(options, $('#pc-feeds-modal-popup'));

            $("#pc-feedpopupbutton").on('click',function(){
                // Ensure state is reset
                if (pureclarityObj.isComplete){
                    pcFeedResetState();
                    pureclarityObj.messageContainer.hide();
                }
                $("#pc-feeds-modal-popup").modal('openModal');
            });
        }
    );
</script>



