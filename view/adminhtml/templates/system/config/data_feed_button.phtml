<?php echo $block->getButtonHtml() ?>

<style>
    #pc-outputContainer {margin:20px 0;height:30px;}
</style>

<div id="pc-modal-popup" style="display:none;" class="admin__scope-old">
    
    <h4>Select the store that would like to generate feeds for:</h4>

    <div>
        <select id="pc-selectStore" class="select admin__controle-select">
            <?php foreach ($block->getStores() as $store): ?>
                <option value="<?php echo $store['id']; ?>" ><?php echo $store['website'] . " - " . $store['name']; ?></option>
            <?php endforeach; ?>
        </select>
    </div>

    <div style="margin:10px 0">
        <div>
            <input id="pc-chkProducts" type="checkbox" checked="true" /><label>Products</label>
        </div>
        <div>
            <input id="pc-chkCategories" type="checkbox" checked="true" /><label>Categories</label>
        </div>
        <div>
            <input id="pc-chkBrands" type="checkbox" checked="true" /><label>Brands</label>
        </div>
        <div>
            <input id="pc-chkUsers" type="checkbox" checked="true" /><label>Users</label>
        </div>
    </div>

    <?php if ($block->showOrderImportOption()):  ?>
        <div id="orderhistory" style="margin:30px 0">
            <h2>Order History Initialization</h2>
            <h4 style="color:red">WARNING: This can only be run once per application. Importing your orders helps to initialize PureClarity with the purchasing behavior of your visitors.</h4>
            <div>
                <input id="pc-chkOrders" type="checkbox" /><label>Import Historic Sales Orders</label>
            </div>
        </div>
    <?php endif; ?>
    

    <div id="pc-outputContainer">
        <div id="pc-statusMessage" style="display:none"></div>
    </div>

    <div>
        <button id="pc-runFeedButton" onclick="pureclarityObj.runFeed()">Run selected feed generations now</button>
        <!-- <img id="pureclarity_magento_loading_image" class="pureclarity_magento_loading_image pureclarity_magento_loading_image_hidden" src="<?php echo $this->getSkinUrl('images/ajax-loader-tr.gif') ?>" /> -->
    </div>
</div>




<script>
    var pureclarityObj = pureclarityObj || {};
    require(['jquery','Magento_Ui/js/modal/modal'],
        function($, modal){
            (function(window, $, modal){
                window.pureclarityObj = {

                    // Set vars
                    runFeedUrl: '<?php echo $block->getFeedExecutionUrl(); ?>',
                    progressFeedUrl: '<?php echo $block->getFeedProgressUrl(); ?>',
                    deltasUrl: '<?php echo $block->getDeltasUrl(); ?>',
                    showImportOption: <?php echo $block->showOrderImportOption()?'true':'false' ?>,
                    isComplete: true,
                    modal: modal,
                    selectStore: $('#pc-selectStore'),
                    runButton: $('#pc-runFeedButton'),
                    messageContainer: $('#pc-statusMessage'),
                    chkProducts: $('#pc-chkProducts'),
                    chkCategories: $('#pc-chkCategories'),
                    chkBrands: $('#pc-chkBrands'),
                    chkUsers: $('#pc-chkUsers'),
                    chkOrders: $('#pc-chkOrders'),
                    selectedStore: 0,
		    callError: null,

                    // Initialise function
                    init: function(){
                        var options = {
                            type: 'popup',
                            responsive: true,
                            innerScroll: true,
                            title: 'PureClarity Data Feed',
                            buttons: [{
                                text: $.mage.__('Close'),
                                class: '',
                                click: function () {
                                    this.closeModal();
                                }
                            }]
                        };
                        var popup = this.modal(options, $('#pc-modal-popup'));
                        var self = this;
                        $("#pc-feedpopupbutton").on('click',function(){ 
                            // Ensure state is reset
                            if (self.isComplete){
                                self.resetState();
                                self.messageContainer.hide();
                            }
                            $("#pc-modal-popup").modal("openModal");
                        });
                    },

                    // Function to execute running of feed
                    runFeed: function(){
                        if (this.isComplete){
                            if (!this.chkProducts.is(':checked') && !this.chkCategories.is(':checked') && !this.chkBrands.is(':checked') && !this.chkUsers.is(':checked') && !this.chkOrders.is(':checked')){
                                this.message("Error: You must select at least one feed type to create.");
                                return;
                            }
                            this.message("Initialising...");
                            this.selectedStore = this.selectStore.find(":selected").val();
                            this.selectStore.prop("disabled", true);
                            this.runButton.prop("disabled", true);
                            this.chkProducts.prop("disabled", true);
                            this.chkCategories.prop("disabled", true);
                            this.chkBrands.prop("disabled", true);
                            this.chkUsers.prop("disabled", true);
                            if (this.showImportOption)
                                this.chkOrders.prop("disabled", true);
                            this.isComplete = false;
                            var urlParts = [this.runFeedUrl + '?storeid='+this.selectedStore];
                            urlParts.push('product='+this.chkProducts.is(':checked'));
                            urlParts.push('category='+this.chkCategories.is(':checked'));
                            urlParts.push('brand='+this.chkBrands.is(':checked'));
                            urlParts.push('user='+this.chkUsers.is(':checked'));
                            if (this.showImportOption)
                                urlParts.push('orders='+this.chkOrders.is(':checked'));
                            var self = this;
			    $.ajax({
                                url: urlParts.join('&'),
                                data: {form_key: window.FORM_KEY, storeid: this.selectedStore},
                            }).done(function(response) {
                            }).fail(function(jqXHR, status, err) {
				self.callError = jqXHR.responseText;
			    });
                            var progressCheck = this.progressCheck.bind(this);
                            setTimeout(progressCheck, 1000);
                        }
                    },
                    progressCheck: function(){
			if (this.callError){
                                this.message(this.callError);
                                this.isComplete = true;
                                this.resetState();
                        }
			else {
                        	var manageProgressResponse = this.manageProgressResponse.bind(this);
                        	$.ajax({
                            		url: this.progressFeedUrl,
                            		data: {form_key: window.FORM_KEY, storeid: this.selectedStore},
                        	}).done(manageProgressResponse);
			}
                    },
                    message: function(message){
                        this.messageContainer.show();
                        this.messageContainer.html("<strong>Status: </strong>" + message);
                    },
                    manageProgressResponse: function(response){
                        if (response && response.error){
                            this.message("ERROR: Sorry but an error occurred. " + response.error);
                            this.isComplete = true;
                            this.resetState();
                        }
                        else if (response && response.isUploaded){
                            this.message("SUCCESS: Data feed(s) successfully submitted to PureClarity.")
                            this.resetState();
                        }
                        else{
                            if (response && response.isComplete == false){
                                var percent = ((response.cur/response.max) * 100).toFixed(0)
                                var message = "Building " + response.name + " feed... (" + percent + "%)";
                                this.message(message);
                            }
                            else if (response) {
                                this.message('Uploading to PureClarity...');
                            }

                            var progressCheck = this.progressCheck.bind(this);
                            setTimeout(progressCheck, 1000);
                        }
                    },
                    resetState: function(hideMessage){
                        this.isComplete = true;
                        this.selectStore.prop("disabled", false);
                        this.runButton.prop("disabled", false);
                        this.chkProducts.prop("disabled", false);
                        this.chkCategories.prop("disabled", false);
                        this.chkBrands.prop("disabled", false);
                        this.chkUsers.prop("disabled", false);
                        if (this.showImportOption)
                            this.chkOrders.prop("disabled", false);
                    }
                }
            })(window, $, modal);

            // Initialise pc
            pureclarityObj.init();
        }
    );
</script>



